from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.contrib.auth.models import User
from django.core.exceptions import PermissionDenied
from django.db.models import Prefetch, Q
from django.shortcuts import redirect, get_object_or_404
from django.urls import reverse_lazy
from django.views import View
from django.views.generic import CreateView, DetailView, ListView, DeleteView, UpdateView, FormView
from django.contrib import messages, auth
from django_extensions import logging

from MainApp.forms import SnippetForm, CommentForm, UserRegistrationForm
from MainApp.models import Snippet, Comment, Notification, LANG_CHOICES
from MainApp.utils import send_activation_email
import logging

class AddSnippetView(LoginRequiredMixin, CreateView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–Ω–∏–ø–ø–µ—Ç–∞"""
    model = Snippet
    form_class = SnippetForm
    template_name = 'pages/add_snippet.html'
    success_url = reverse_lazy('snippets-list')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['pagename'] = '–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–ø–ø–µ—Ç–∞'
        return context

    def form_valid(self, form):
        form.instance.user = self.request.user
        messages.success(self.request, "Success!!!")
        return super().form_valid(form)


class SnippetDetailView(DetailView):
    model = Snippet
    template_name = 'pages/snippet_detail.html'
    pk_url_kwarg = 'id'

    def get_queryset(self):
        snippet = Snippet.objects.prefetch_related(
            Prefetch('comments',
                     queryset=Comment.with_likes_count().select_related('author')),
            "tags")
        return snippet

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        comments_form = CommentForm()
        snippet = self.get_object()
        context['pagename'] = f'–°–Ω–∏–ø–ø–µ—Ç: {snippet.name}'
        context["comments_form"] = comments_form
        return context


class UserLogoutView(View):

    def get(self, request):
        auth.logout(request)
        return redirect('home')
    # POST -> GET
    # GET - –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
    # POST - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ BD


# CBV
# 1. –£–º–µ–Ω—å—à–∞–µ—Ç—Å—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
# 2.
class UserNotificationsView(LoginRequiredMixin, ListView):
    model = Notification
    template_name = 'pages/notifications.html'
    context_object_name = "notifications"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['pagename'] = '–ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        return context

    def get_queryset(self):
        notifications = Notification.objects.filter(recipient=self.request.user)
        # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        Notification.objects.filter(recipient=self.request.user).update(is_read=True)
        return notifications


class SnippetsListView(ListView):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, –ø–æ–∏—Å–∫–æ–º –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
    model = Snippet
    template_name = 'pages/view_snippets.html'
    context_object_name = 'snippets'
    paginate_by = 5

    def get_queryset(self):
        my_snippets = self.kwargs.get('snippets_my', False)

        if my_snippets:
            if not self.request.user.is_authenticated:
                raise PermissionDenied
            queryset = Snippet.objects.filter(user=self.request.user)
        else:
            if self.request.user.is_authenticated:  # auth: all public + self private
                queryset = Snippet.objects.filter(
                    # Q(public=True) | Q(public=False, user=self.request.user),
                    Q(public=True) | Q(user=self.request.user)

                ).select_related("user")
            else:  # not auth: all public
                queryset = Snippet.objects.filter(public=True).select_related("user")

        # –ü–æ–∏—Å–∫
        search = self.request.GET.get("search")
        if search:
            queryset = queryset.filter(
                Q(name__icontains=search) |
                Q(code__icontains=search)
            )

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —è–∑—ã–∫—É
        lang = self.request.GET.get("lang")
        if lang:
            queryset = queryset.filter(lang=lang)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = self.request.GET.get("user_id")
        if user_id:
            queryset = queryset.filter(user__id=user_id)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort = self.request.GET.get("sort")
        if sort:
            queryset = queryset.order_by(sort)

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        my_snippets = self.kwargs.get('snippets_my', False)

        if my_snippets:
            context['pagename'] = '–ú–æ–∏ —Å–Ω–∏–ø–ø–µ—Ç—ã'
        else:
            context['pagename'] = '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–Ω–∏–ø–ø–µ—Ç–æ–≤'

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å–Ω–∏–ø–ø–µ—Ç–∞–º–∏
        users = User.objects.filter(snippet__isnull=False).distinct()

        context.update({
            'sort': self.request.GET.get("sort"),
            'LANG_CHOICES': LANG_CHOICES,
            'users': users,
            'lang': self.request.GET.get("lang"),
            'user_id': self.request.GET.get("user_id")
        })

        return context


class SnippetEditView(LoginRequiredMixin, UpdateView):
    model = Snippet
    form_class = SnippetForm
    template_name = 'pages/add_snippet.html'
    success_url = reverse_lazy('snippets-list')
    pk_url_kwarg = 'id'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["pagename"] = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–∏–ø–ø–µ—Ç–∞'
        context["edit"] = True
        context["id"] = self.kwargs.get("id")
        return context

logger = logging.getLogger(__name__)
class UserRegistrationView(FormView):
    template_name = 'pages/registration.html'
    form_class = UserRegistrationForm
    success_url = reverse_lazy('home')  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π redirect –Ω–∞ –≥–ª–∞–≤–Ω—É—é

    def form_valid(self, form):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é (form.is_valid() == True)
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
            user = form.save()  # üö© user —É–∂–µ is_active=False –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (id=%d)", user.username, user.id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
            send_activation_email(user, self.request)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            messages.success(self.request, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! "
                                           f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.")

            return super().form_valid(form)

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", str(e))
            messages.error(self.request, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return self.form_invalid(form)

    def form_invalid(self, form):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —à–∞–±–ª–æ–Ω.
        """
        logger.warning("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã: %s", form.errors.as_json())
        return super().form_invalid(form)

    def get_context_data(self, **kwargs):
        """
        –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞.
        """
        context = super().get_context_data(**kwargs)
        context['user_form'] = context['form']  # –¥–æ–±–∞–≤–ª—è–µ–º user_form –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        context['pagename'] = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        return context